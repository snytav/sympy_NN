# -*- coding: utf-8 -*-
"""symbolic_layers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z1PwJkqeZ6CfhgMWSm8fn_h9-PNtK_97
"""

from sympy import *
import numpy as np

Nx=3
Ny = 1


def array_of_vars(name, Ny, Nx):
    xx = []
    for i in range(Ny):
        xline = []
        for j in range(Nx):
            xl = var(name + '_%d%d' % (i, j))
            xline.append(xl)


        xline = np.array(xline)
        xline.squeeze()
        xx.append(xline)
    xx = np.array(xx)
    #xx = xx.reshape(xx.shape[0])
    return xx
#1st layer variables
xx = array_of_vars('x',1,1)
print('xx ',xx)
ww = array_of_vars('w',3,1)
print('ww ',ww)

#weighted product
fc1 = np.matmul(ww,xx)
fc1 = fc1.reshape(fc1.shape[0])

def sigmoid(x):
  return 1 / (1 + exp(-x))

# sigmoid of 1st layer
sigma = lambda t: 1 / (1 + exp(-t))
sigma_fc1 = np.array([sigma(xi) for xi in fc1])
print(sigma_fc1)

# 2nd layer weights
vv = array_of_vars('v',1,3)
print('vv ',vv)

N = np.matmul(vv,sigma_fc1)
print(N)

dN_dx0 = diff(N,x_00)
print(dN_dx0)